package orsk.compli.repository.jpa;

import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.stereotype.Repository;
import orsk.compli.entities.jpa.JpaVulnerability;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Repository("VulnerabilityJpaRepository")
public interface VulnerabilityJpaRepository extends JpaRepository<JpaVulnerability, Long>, JpaSpecificationExecutor<JpaVulnerability> {

    // Find vulnerabilities by severity score
    List<JpaVulnerability> findBySeverityScoreGreaterThanEqual(double score);

    // Find vulnerabilities by CVE ID
    Optional<JpaVulnerability> findByCveId(String cveId);

    // Find vulnerabilities published after a certain date
    List<JpaVulnerability> findByPublishedDateAfter(LocalDate date);

    // Custom Specification for complex queries
    static Specification<JpaVulnerability> isExploitedAndSevere(boolean exploited, double score) {
        return (root, query, cb) -> cb.and(
                cb.equal(root.get("exploited"), exploited),
                cb.ge(root.get("severityScore"), score)
        );
    }

    // Custom Specification for publication date
    static Specification<JpaVulnerability> publishedAfter(LocalDate date) {
        return (root, query, cb) -> cb.greaterThan(root.get("publishedDate"), date);
    }
}
