package orsk.compli.service.jpa;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import orsk.compli.entities.jpa.JpaVulnerability;
import orsk.compli.repository.jpa.VulnerabilityJpaRepository;

import java.util.List;
import java.util.Optional;

@Service()
public class VulnerabilityJpaService implements CrudService<JpaVulnerability, Long> {

    private final VulnerabilityJpaRepository vulnerabilityServiceRepository;

    @Autowired
    public VulnerabilityJpaService(VulnerabilityJpaRepository vulnerabilityServiceRepository) {
        this.vulnerabilityServiceRepository = vulnerabilityServiceRepository;
    }

    @Override
    public JpaVulnerability create(JpaVulnerability entity) {
        return vulnerabilityServiceRepository.save(entity);
    }

    @Override
    public List<JpaVulnerability> getAll() {
        return vulnerabilityServiceRepository.findAll();
    }

    @Override
    public Optional<JpaVulnerability> getById(Long id) {
        return vulnerabilityServiceRepository.findById(Long.valueOf(String.valueOf(id)));
    }

    @Override
    public JpaVulnerability update(Long id, JpaVulnerability entity) {
        Optional<JpaVulnerability> optionalEntity = vulnerabilityServiceRepository.findById(Long.valueOf(String.valueOf(id)));
        if (optionalEntity.isPresent()) {
            JpaVulnerability existingEntity = optionalEntity.get();
            // TODO: Update fields of existingEntity with values from entity
            return vulnerabilityServiceRepository.save(existingEntity);
        } else {
            throw new RuntimeException("Entity not found with id " + id);
        }
    }

    @Override
    public boolean delete(Long id) {
        if (vulnerabilityServiceRepository.existsById(Long.valueOf(String.valueOf(id)))) {
            vulnerabilityServiceRepository.deleteById(Long.valueOf(String.valueOf(id)));
            return true;
        }
        return false;
    }
}
