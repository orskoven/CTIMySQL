
package orsk.compli.service.jpa;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import orsk.compli.entities.Vulnerability;
import orsk.compli.exception.EntityNotFoundException;
import orsk.compli.repository.jpa.VulnerabilityJpaRepository;

import java.util.List;
import java.util.Optional;

@Service("jpaVulnerabilityService")
public class VulnerabilityJpaService implements CrudService<Vulnerability, Long> {

    private static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityJpaService.class);

    private final VulnerabilityJpaRepository vulnerabilityRepository;

    @Autowired
    public VulnerabilityJpaService(VulnerabilityJpaRepository vulnerabilityRepository) {
        this.vulnerabilityRepository = vulnerabilityRepository;
    }

    @Override
    @Transactional
    public Vulnerability create(Vulnerability entity) {
        LOGGER.info("Creating Vulnerability: {}", entity);
        return vulnerabilityRepository.save(entity);
    }

    @Override
    public List<Vulnerability> createBatch(List<Vulnerability> entities) {
        return List.of();
    }

    @Override
    public List<Vulnerability> getAll() {
        LOGGER.info("Retrieving all Vulnerabilities");
        return vulnerabilityRepository.findAll();
    }

    @Override
    public Optional<Vulnerability> getById(Long id) {
        LOGGER.info("Retrieving Vulnerability with ID: {}", id);
        return vulnerabilityRepository.findById(id);
    }

    @Override
    @Transactional
    public Vulnerability update(Long id, Vulnerability entity) {
        LOGGER.info("Updating Vulnerability with ID: {}", id);
        return vulnerabilityRepository.findById(id)
                .map(existing -> {
                    existing.setName(entity.getName());
                    existing.setDescription(entity.getDescription());
                    existing.setSeverity(entity.getSeverity());
                    // Add other field mappings as necessary
                    return vulnerabilityRepository.save(existing);
                })
                .orElseThrow(() -> new EntityNotFoundException("Vulnerability not found with id " + id));
    }

    @Override
    @Transactional
    public boolean delete(Long id) {
        LOGGER.info("Deleting Vulnerability with ID: {}", id);
        if (vulnerabilityRepository.existsById(id)) {
            vulnerabilityRepository.deleteById(id);
            return true;
        }
        LOGGER.warn("Vulnerability with ID: {} not found for deletion", id);
        return false;
    }
}

