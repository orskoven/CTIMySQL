#!/bin/bash

# setup_tests.sh
# Script to create test folder architecture and insert initial test cases.

# Define base test directory
BASE_TEST_DIR="/Users/simonbeckmann/IdeaProjects/CyberDashboar/src/CTIMySQLFINAL/src/main/test"

# Define subdirectories
UNIT_TEST_DIR="$BASE_TEST_DIR/unit"
INTEGRATION_TEST_DIR="$BASE_TEST_DIR/integration"
SECURITY_TEST_DIR="$BASE_TEST_DIR/security"
PERFORMANCE_TEST_DIR="$BASE_TEST_DIR/performance"

# Define service names and corresponding test class names
declare -A SERVICES
SERVICES=(
    ["VulnerabilityJpaService"]="VulnerabilityJpaServiceTest"
    ["CountryJpaService"]="CountryJpaServiceTest"
    ["GlobalThreatJpaService"]="GlobalThreatJpaServiceTest"
    ["AdminService"]="AdminServiceTest"
    ["ThreatActorTypeJpaService"]="ThreatActorTypeJpaServiceTest"
    ["UserService"]="UserServiceTest"
    ["GeolocationJpaService"]="GeolocationJpaServiceTest"
    ["AttackVectorJpaService"]="AttackVectorJpaServiceTest"
    ["AffectedProductJpaService"]="AffectedProductJpaServiceTest"
    ["AuthService"]="AuthServiceTest"
    ["ThreatCategoryJpaService"]="ThreatCategoryJpaServiceTest"
    ["RefreshTokenJpaService"]="RefreshTokenJpaServiceTest"
    ["SearchService"]="SearchServiceTest"
    ["AttackVectorCategoryJpaService"]="AttackVectorCategoryJpaServiceTest"
    ["ThreatActorJpaService"]="ThreatActorJpaServiceTest"
    ["AdminController"]="AdminControllerTest"
)

# Function to create directories
create_directories() {
    echo "Creating test directories..."
    mkdir -p "$UNIT_TEST_DIR/service"
    mkdir -p "$INTEGRATION_TEST_DIR/service"
    mkdir -p "$SECURITY_TEST_DIR/service"
    mkdir -p "$PERFORMANCE_TEST_DIR/service"
    echo "Test directories created successfully."
}

# Function to create unit test files
create_unit_tests() {
    echo "Creating unit test files..."
    for SERVICE in "${!SERVICES[@]}"; do
        TEST_CLASS="${SERVICES[$SERVICE]}"
        TEST_FILE="$UNIT_TEST_DIR/service/$TEST_CLASS.java"
        if [ ! -f "$TEST_FILE" ]; then
            cat <<EOF > "$TEST_FILE"
/**
 * Unit tests for $SERVICE
 * Generated by setup_tests.sh
 */

package orsk.compli.tests.unit.service;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import orsk.compli.service.jpa.$SERVICE;
import orsk.compli.repository.jpa.${SERVICE%Service}JpaRepository;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class $TEST_CLASS {

    @Mock
    private ${SERVICE%Service}JpaRepository ${SERVICE%Service}Repository;

    @InjectMocks
    private $SERVICE $SERVICEInstance;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreate() {
        // TODO: Implement test case for create method
    }

    @Test
    public void testGetAll() {
        // TODO: Implement test case for getAll method
    }

    @Test
    public void testGetById() {
        // TODO: Implement test case for getById method
    }

    @Test
    public void testUpdate() {
        // TODO: Implement test case for update method
    }

    @Test
    public void testDelete() {
        // TODO: Implement test case for delete method
    }
}
EOF
            echo "Created $TEST_FILE"
        else
            echo "Test file $TEST_FILE already exists. Skipping..."
        fi
    done
    echo "Unit test files created."
}

# Function to create integration test files
create_integration_tests() {
    echo "Creating integration test files..."
    for SERVICE in "${!SERVICES[@]}"; do
        TEST_CLASS="${SERVICES[$SERVICE]}"
        TEST_FILE="$INTEGRATION_TEST_DIR/service/${TEST_CLASS}IntegrationTest.java"
        if [ ! -f "$TEST_FILE" ]; then
            cat <<EOF > "$TEST_FILE"
/**
 * Integration tests for $SERVICE
 * Generated by setup_tests.sh
 */

package orsk.compli.tests.integration.service;

import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import orsk.compli.service.jpa.$SERVICE;

import static org.junit.Assert.*;

@SpringBootTest
public class ${TEST_CLASS}IntegrationTest {

    @Autowired
    private $SERVICE $SERVICEInstance;

    @Before
    public void setUp() {
        // Initialize integration test data
    }

    @Test
    public void testServiceIntegration() {
        // TODO: Implement integration test cases
    }
}
EOF
            echo "Created $TEST_FILE"
        else
            echo "Integration test file $TEST_FILE already exists. Skipping..."
        fi
    done
    echo "Integration test files created."
}

# Function to create security test files
create_security_tests() {
    echo "Creating security test files..."
    for SERVICE in "${!SERVICES[@]}"; do
        TEST_CLASS="${SERVICES[$SERVICE]}"
        TEST_FILE="$SECURITY_TEST_DIR/service/${TEST_CLASS}SecurityTest.java"
        if [ ! -f "$TEST_FILE" ]; then
            cat <<EOF > "$TEST_FILE"
/**
 * Security tests for $SERVICE
 * Generated by setup_tests.sh
 */

package orsk.compli.tests.security.service;

import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import orsk.compli.service.jpa.$SERVICE;

import static org.junit.Assert.*;

@SpringBootTest
public class ${TEST_CLASS}SecurityTest {

    @Autowired
    private $SERVICE $SERVICEInstance;

    @Before
    public void setUp() {
        // Initialize security test data
    }

    @Test
    public void testAccessControls() {
        // TODO: Implement security test cases
    }
}
EOF
            echo "Created $TEST_FILE"
        else
            echo "Security test file $TEST_FILE already exists. Skipping..."
        fi
    done
    echo "Security test files created."
}

# Function to create performance test files
create_performance_tests() {
    echo "Creating performance test files..."
    for SERVICE in "${!SERVICES[@]}"; do
        TEST_CLASS="${SERVICES[$SERVICE]}"
        TEST_FILE="$PERFORMANCE_TEST_DIR/service/${TEST_CLASS}PerformanceTest.java"
        if [ ! -f "$TEST_FILE" ]; then
            cat <<EOF > "$TEST_FILE"
/**
 * Performance tests for $SERVICE
 * Generated by setup_tests.sh
 */

package orsk.compli.tests.performance.service;

import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import orsk.compli.service.jpa.$SERVICE;

import static org.junit.Assert.*;

@SpringBootTest
public class ${TEST_CLASS}PerformanceTest {

    @Autowired
    private $SERVICE $SERVICEInstance;

    @Before
    public void setUp() {
        // Initialize performance test data
    }

    @Test
    public void testServicePerformance() {
        // TODO: Implement performance test cases
    }
}
EOF
            echo "Created $TEST_FILE"
        else
            echo "Performance test file $TEST_FILE already exists. Skipping..."
        fi
    done
    echo "Performance test files created."
}

# Function to create all test types
create_all_tests() {
    create_unit_tests
    create_integration_tests
    create_security_tests
    create_performance_tests
}

# Main Execution
create_directories
create_all_tests

echo "Test folder architecture and test files setup completed successfully."